interface ExtendedFetchResponse extends Response {
    size: number;
    timeout: number;
}
export interface FetchAsInfo extends Pick<ExtendedFetchResponse, 'size' | 'timeout' | 'type'> {
    headers: UnknownRecord;
}
export interface FetchAsReturnType<T = any, U = any> {
    status: number;
    info: FetchAsInfo;
    data?: T;
    error?: U;
}
declare type UnknownRecord = Record<string, unknown>;
export declare function fetchAsArrayBuffer<T = ArrayBuffer, U = ArrayBuffer>(url: string, options?: RequestInit): Promise<FetchAsReturnType<T, U>>;
export declare function fetchAsBlob<T = Blob, U = Blob>(url: string, options?: RequestInit): Promise<FetchAsReturnType<T, U>>;
export declare function fetchAsJson<T = {}, U = {}>(url: string, options?: RequestInit): Promise<FetchAsReturnType<T, U>>;
export declare function fetchAsText<T = string, U = any>(url: string, options?: RequestInit): Promise<FetchAsReturnType<T, U>>;
declare const _default: {
    arrayBuffer: typeof fetchAsArrayBuffer;
    blob: typeof fetchAsBlob;
    json: typeof fetchAsJson;
    text: typeof fetchAsText;
};
export default _default;
//# sourceMappingURL=index.d.ts.map