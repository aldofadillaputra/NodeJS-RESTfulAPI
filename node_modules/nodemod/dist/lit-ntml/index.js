import { parse, parseFragment, serialize } from '../lib/parse5.js';
async function processLiterals(strings, ...exps) {
    const listTask = exps.map(async (n) => {
        const tasks = (Array.isArray(n) ? n : [n])
            .map(async (o) => 'function' === typeof (o) ? o() : o);
        return Promise.all(tasks);
    });
    const done = await Promise.all(listTask);
    const doneLen = done.length;
    return strings.reduce((p, n, i) => {
        const nTask = done[i];
        const joined = Array.isArray(nTask) ? nTask.join('') : nTask;
        return `${p}${i >= doneLen ? n : `${n}${joined}`}`;
    }, '');
}
async function parsePartial(fn, strings, ...exps) {
    try {
        const content = await processLiterals(strings, ...exps);
        return serialize(fn(content));
    }
    catch (e) {
        throw e;
    }
}
export const html = async (s, ...e) => parsePartial(c => parse(`<!doctype html>${c}`), s, ...e);
export const htmlFragment = async (s, ...e) => parsePartial(parseFragment, s, ...e);
//# sourceMappingURL=index.js.map