import { getWeekNumber } from './get-week-number.js';
import { toUTCDate } from './to-utc-date.js';
function normalizeWeekday(weekday) {
    if (weekday >= 0 && weekday < 7)
        return weekday;
    const weekdayOffset = weekday < 0 ? 7 * Math.ceil(Math.abs(weekday / 7)) : 0;
    return (weekdayOffset + weekday) % 7;
}
function shiftDisabledDays(firstDayOfWeek, disabledDays) {
    return disabledDays.map((n) => {
        const day = n - firstDayOfWeek;
        return day < 0 ? 7 + day : day;
    });
}
export function calendar(options) {
    const { dayFormat, fullDateFormat, locale, selectedDate, disabledDates = [], disabledDays = [], firstDayOfWeek = 0, max, min, showWeekNumber = false, weekLabel = 'Week', weekNumberType = 'first-4-day-week', } = options || {};
    const fy = selectedDate.getUTCFullYear();
    const selectedMonth = selectedDate.getUTCMonth();
    const calendarKey = `${locale}:${toUTCDate(fy, selectedMonth, 1).toJSON()}`;
    const totalDays = toUTCDate(fy, selectedMonth + 1, 0).getUTCDate();
    const preFirstWeekday = toUTCDate(fy, selectedMonth, 1).getUTCDay() - firstDayOfWeek;
    const firstWeekday = normalizeWeekday(preFirstWeekday);
    const totalCol = showWeekNumber ? 8 : 7;
    const firstWeekdayWithWeekNumberOffset = firstWeekday + (showWeekNumber ? 1 : 0);
    const calendarDays = [];
    const minTime = null == min ? Number.MIN_SAFE_INTEGER : +min;
    const maxTime = null == max ? Number.MAX_SAFE_INTEGER : +max;
    const disabledDatesSet = new Set(disabledDates.map(n => +n));
    const disabledDaysSet = new Set(!firstDayOfWeek ? disabledDays : shiftDisabledDays(firstDayOfWeek, disabledDays));
    let calendarRow = [];
    let day = 1;
    let row = 0;
    let col = 0;
    let calendarFilled = false;
    for (let i = 0, len = 6 * totalCol + (showWeekNumber ? 6 : 0); i <= len; i += 1, col += 1) {
        if (col >= totalCol) {
            col = 0;
            row += 1;
            calendarDays.push(calendarRow);
            calendarRow = [];
        }
        if (i >= len)
            break;
        const rowVal = col + (row * totalCol);
        if (!calendarFilled && showWeekNumber && col < 1) {
            const { weekNumber } = getWeekNumber(weekNumberType, toUTCDate(fy, selectedMonth, day - (row < 1 ? firstWeekday : 0)));
            const wkLabel = `${weekLabel} ${weekNumber}`;
            calendarRow.push({
                fullDate: null,
                label: wkLabel,
                value: `${weekNumber}`,
                key: `${calendarKey}:${wkLabel}`,
                disabled: true,
            });
            continue;
        }
        if (calendarFilled || rowVal < firstWeekdayWithWeekNumberOffset) {
            calendarRow.push({
                fullDate: null,
                label: null,
                value: null,
                key: `${calendarKey}:${i}`,
                disabled: true,
            });
            continue;
        }
        const fullDate = toUTCDate(fy, selectedMonth, day);
        const fullDateTime = +fullDate;
        const isDisabledDay = disabledDaysSet.has(col) ||
            disabledDatesSet.has(fullDateTime) ||
            (fullDateTime < minTime || fullDateTime > maxTime);
        if (isDisabledDay)
            disabledDatesSet.add(fullDateTime);
        calendarRow.push({
            fullDate,
            label: fullDateFormat(fullDate),
            value: dayFormat(fullDate),
            key: `${calendarKey}:${fullDate.toJSON()}`,
            disabled: isDisabledDay,
        });
        day += 1;
        if (day > totalDays)
            calendarFilled = true;
    }
    return {
        disabledDatesSet,
        disabledDaysSet,
        calendar: calendarDays,
        key: calendarKey,
    };
}
//# sourceMappingURL=calendar.js.map