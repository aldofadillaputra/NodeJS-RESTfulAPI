{"version":3,"file":"calendar_typing.js","sourceRoot":"","sources":["../../src/calendar/calendar_typing.ts"],"names":[],"mappings":"","sourcesContent":["interface CalendarOptionsBase {\n  firstDayOfWeek?: number;\n  showWeekNumber?: boolean;\n  weekLabel?: string;\n}\n\ninterface CalendarOutputBase {\n  label: string;\n  value: string;\n}\n\nexport declare type Nullable<T> = {\n  [P in keyof T]: T[P] | null;\n};\n\nexport type DateTimeFormatter = Intl.DateTimeFormat['format'];\n\nexport type WeekNumberType = 'first-4-day-week' | 'first-day-of-year' | 'first-full-week';\n\n// #region calendar\nexport interface CalendarOptions extends CalendarOptionsBase {\n  dayFormat: DateTimeFormatter;\n  fullDateFormat: DateTimeFormatter;\n  locale: string;\n  selectedDate: Date;\n\n  disabledDates?: Date[];\n  disabledDays?: number[];\n  max?: Date;\n  min?: Date;\n  weekNumberType?: WeekNumberType;\n}\n\nexport interface CalendarDay extends Nullable<CalendarOutputBase> {\n  fullDate: Date | null;\n  key: string;\n  disabled: boolean;\n}\n\nexport interface Calendar {\n  key: string;\n  calendar: CalendarDay[][] | null;\n  disabledDatesSet: Set<number> | null;\n  disabledDaysSet: Set<number> | null;\n}\n// #endregion calendar\n\n// #region getWeekdays\nexport interface GetWeekdaysOptions extends CalendarOptionsBase {\n  longWeekdayFormat: DateTimeFormatter;\n  narrowWeekdayFormat: DateTimeFormatter;\n}\n\nexport type CalendarWeekday = CalendarOutputBase;\n// #endregion getWeekdays\n\n// #region getWeekNumber\nexport interface WeekNumber {\n  originalDate: Date;\n  fixedDate: Date;\n  weekNumber: number;\n}\n// #endregion getWeekNumber\n"]}